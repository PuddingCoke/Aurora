#include<Aurora/Core/ResourceFormat.h>

const std::unordered_map<FMT, DXGI_FORMAT> ResourceFormat::formatMap =
{
	//Int
	{R8I,DXGI_FORMAT_R8_SINT},
	{RG8I,DXGI_FORMAT_R8G8_SINT},
	{RGBA8I,DXGI_FORMAT_R8G8B8A8_SINT},

	{R16I,DXGI_FORMAT_R16_SINT},
	{RG16I,DXGI_FORMAT_R16G16_SINT},
	{RGBA16I,DXGI_FORMAT_R16G16B16A16_SINT},

	{R32I,DXGI_FORMAT_R32_SINT},
	{RG32I,DXGI_FORMAT_R32G32_SINT},
	{RGBA32I,DXGI_FORMAT_R32G32B32A32_SINT},

	//Uint
	{R8UI,DXGI_FORMAT_R8_UINT},
	{RG8UI,DXGI_FORMAT_R8G8_UINT},
	{RGBA8UI,DXGI_FORMAT_R8G8B8A8_UINT},

	{R16UI,DXGI_FORMAT_R16_UINT},
	{RG16UI,DXGI_FORMAT_R16G16_UINT},
	{RGBA16UI,DXGI_FORMAT_R16G16B16A16_UINT},

	{R32UI,DXGI_FORMAT_R32_UINT},
	{RG32UI,DXGI_FORMAT_R32G32_UINT},
	{RGBA32UI,DXGI_FORMAT_R32G32B32A32_UINT},

	//Unorm
	{R8UN,DXGI_FORMAT_R8_UNORM},
	{RG8UN,DXGI_FORMAT_R8G8_UNORM},
	{RGBA8UN,DXGI_FORMAT_R8G8B8A8_UNORM},

	{R16UN,DXGI_FORMAT_R16_UNORM},
	{RG16UN,DXGI_FORMAT_R16G16_UNORM},
	{RGBA16UN,DXGI_FORMAT_R16G16B16A16_UNORM},

	{BGRA8UN,DXGI_FORMAT_B8G8R8A8_UNORM},

	//Snorm
	{R8SN,DXGI_FORMAT_R8_SNORM},
	{RG8SN,DXGI_FORMAT_R8G8_SNORM},
	{RGBA8SN,DXGI_FORMAT_R8G8B8A8_SNORM},

	{R16SN,DXGI_FORMAT_R16_SNORM},
	{RG16SN,DXGI_FORMAT_R16G16_SNORM},
	{RGBA16SN,DXGI_FORMAT_R16G16B16A16_SNORM},

	//Float
	{R16F,DXGI_FORMAT_R16_FLOAT},
	{RG16F,DXGI_FORMAT_R16G16_FLOAT},
	{RGBA16F,DXGI_FORMAT_R16G16B16A16_FLOAT},

	{R32F,DXGI_FORMAT_R32_FLOAT},
	{RG32F,DXGI_FORMAT_R32G32_FLOAT},
	{RGBA32F,DXGI_FORMAT_R32G32B32A32_FLOAT},

	{RG11B10F,DXGI_FORMAT_R11G11B10_FLOAT},

	//Type Less
	{R8TL,DXGI_FORMAT_R8_TYPELESS},
	{RG8TL,DXGI_FORMAT_R8G8_TYPELESS},
	{RGBA8TL,DXGI_FORMAT_R8G8B8A8_TYPELESS},

	{R16TL,DXGI_FORMAT_R16_TYPELESS},
	{RG16TL,DXGI_FORMAT_R16G16_TYPELESS},
	{RGBA16TL,DXGI_FORMAT_R16G16B16A16_TYPELESS},

	{R32TL,DXGI_FORMAT_R32_TYPELESS},
	{RG32TL,DXGI_FORMAT_R32G32_TYPELESS},
	{RGBA32TL,DXGI_FORMAT_R32G32B32A32_TYPELESS},

	//Depth
	{D16UN,DXGI_FORMAT_D16_UNORM},
	{D32F,DXGI_FORMAT_D32_FLOAT},

	//Special
	{NV12,DXGI_FORMAT_NV12},
};

const std::unordered_map<FMT, UINT> ResourceFormat::byteSizeMap =
{
	//Int
	{R8I,1},
	{RG8I,2},
	{RGBA8I,4},

	{R16I,2},
	{RG16I,4},
	{RGBA16I,8},

	{R32I,4},
	{RG32I,8},
	{RGBA32I,16},

	//Uint
	{R8UI,1},
	{RG8UI,2},
	{RGBA8UI,4},

	{R16UI,2},
	{RG16UI,4},
	{RGBA16UI,8},

	{R32UI,4},
	{RG32UI,8},
	{RGBA32UI,16},

	//Unorm
	{R8UN,1},
	{RG8UN,2},
	{RGBA8UN,4},

	{R16UN,2},
	{RG16UN,4},
	{RGBA16UN,8},

	//Snorm
	{R8SN,1},
	{RG8SN,2},
	{RGBA8SN,4},

	{R16SN,2},
	{RG16SN,4},
	{RGBA16SN,8},

	//Float
	{R16F,2},
	{RG16F,4},
	{RGBA16F,8},

	{R32F,4},
	{RG32F,8},
	{RGBA32F,16},

	//Type Less
	{R8TL,1},
	{RG8TL,2},
	{RGBA8TL,4},

	{R16TL,2},
	{RG16TL,4},
	{RGBA16TL,8},

	{R32TL,4},
	{RG32TL,8},
	{RGBA32TL,16},
};

DXGI_FORMAT ResourceFormat::cast(const FMT& fmt)
{
	return formatMap.at(fmt);
}

UINT ResourceFormat::byteSize(const FMT& fmt)
{
	return byteSizeMap.at(fmt);
}
